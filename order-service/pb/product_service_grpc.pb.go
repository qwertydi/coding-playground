// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: product_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductService_List_FullMethodName           = "/products.ProductService/List"
	ProductService_ListByCategory_FullMethodName = "/products.ProductService/ListByCategory"
	ProductService_IncreaseStock_FullMethodName  = "/products.ProductService/IncreaseStock"
	ProductService_DecreaseStock_FullMethodName  = "/products.ProductService/DecreaseStock"
	ProductService_ProductById_FullMethodName    = "/products.ProductService/ProductById"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListProducts, error)
	ListByCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*ListProducts, error)
	IncreaseStock(ctx context.Context, in *ProductStockQuantity, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DecreaseStock(ctx context.Context, in *ProductStockQuantity, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProductById(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ProductResponse, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListProducts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProducts)
	err := c.cc.Invoke(ctx, ProductService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListByCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*ListProducts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProducts)
	err := c.cc.Invoke(ctx, ProductService_ListByCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) IncreaseStock(ctx context.Context, in *ProductStockQuantity, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_IncreaseStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DecreaseStock(ctx context.Context, in *ProductStockQuantity, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_DecreaseStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ProductById(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, ProductService_ProductById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility.
type ProductServiceServer interface {
	List(context.Context, *emptypb.Empty) (*ListProducts, error)
	ListByCategory(context.Context, *CategoryRequest) (*ListProducts, error)
	IncreaseStock(context.Context, *ProductStockQuantity) (*emptypb.Empty, error)
	DecreaseStock(context.Context, *ProductStockQuantity) (*emptypb.Empty, error)
	ProductById(context.Context, *ItemRequest) (*ProductResponse, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServiceServer struct{}

func (UnimplementedProductServiceServer) List(context.Context, *emptypb.Empty) (*ListProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProductServiceServer) ListByCategory(context.Context, *CategoryRequest) (*ListProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByCategory not implemented")
}
func (UnimplementedProductServiceServer) IncreaseStock(context.Context, *ProductStockQuantity) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseStock not implemented")
}
func (UnimplementedProductServiceServer) DecreaseStock(context.Context, *ProductStockQuantity) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecreaseStock not implemented")
}
func (UnimplementedProductServiceServer) ProductById(context.Context, *ItemRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductById not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}
func (UnimplementedProductServiceServer) testEmbeddedByValue()                        {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListByCategory(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_IncreaseStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductStockQuantity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).IncreaseStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_IncreaseStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).IncreaseStock(ctx, req.(*ProductStockQuantity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DecreaseStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductStockQuantity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DecreaseStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DecreaseStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DecreaseStock(ctx, req.(*ProductStockQuantity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ProductById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ProductById(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "products.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ProductService_List_Handler,
		},
		{
			MethodName: "ListByCategory",
			Handler:    _ProductService_ListByCategory_Handler,
		},
		{
			MethodName: "IncreaseStock",
			Handler:    _ProductService_IncreaseStock_Handler,
		},
		{
			MethodName: "DecreaseStock",
			Handler:    _ProductService_DecreaseStock_Handler,
		},
		{
			MethodName: "ProductById",
			Handler:    _ProductService_ProductById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_service.proto",
}

const (
	AdminProductService_Add_FullMethodName    = "/products.AdminProductService/Add"
	AdminProductService_Delete_FullMethodName = "/products.AdminProductService/Delete"
)

// AdminProductServiceClient is the client API for AdminProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminProductServiceClient interface {
	Add(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error)
	Delete(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type adminProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminProductServiceClient(cc grpc.ClientConnInterface) AdminProductServiceClient {
	return &adminProductServiceClient{cc}
}

func (c *adminProductServiceClient) Add(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, AdminProductService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProductServiceClient) Delete(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AdminProductService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminProductServiceServer is the server API for AdminProductService service.
// All implementations must embed UnimplementedAdminProductServiceServer
// for forward compatibility.
type AdminProductServiceServer interface {
	Add(context.Context, *Product) (*ProductResponse, error)
	Delete(context.Context, *ItemRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAdminProductServiceServer()
}

// UnimplementedAdminProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminProductServiceServer struct{}

func (UnimplementedAdminProductServiceServer) Add(context.Context, *Product) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedAdminProductServiceServer) Delete(context.Context, *ItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdminProductServiceServer) mustEmbedUnimplementedAdminProductServiceServer() {}
func (UnimplementedAdminProductServiceServer) testEmbeddedByValue()                             {}

// UnsafeAdminProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminProductServiceServer will
// result in compilation errors.
type UnsafeAdminProductServiceServer interface {
	mustEmbedUnimplementedAdminProductServiceServer()
}

func RegisterAdminProductServiceServer(s grpc.ServiceRegistrar, srv AdminProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminProductService_ServiceDesc, srv)
}

func _AdminProductService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProductServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminProductService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProductServiceServer).Add(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProductService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProductServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminProductService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProductServiceServer).Delete(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminProductService_ServiceDesc is the grpc.ServiceDesc for AdminProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "products.AdminProductService",
	HandlerType: (*AdminProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _AdminProductService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdminProductService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_service.proto",
}
