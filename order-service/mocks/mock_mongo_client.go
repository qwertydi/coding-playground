// Code generated by MockGen. DO NOT EDIT.
// Source: db/db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/qwertydi/order-service/db"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
	readpref "go.mongodb.org/mongo-driver/mongo/readpref"
)

// MockMongoClientInterface is a mock of MongoClientInterface interface.
type MockMongoClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMongoClientInterfaceMockRecorder
}

// MockMongoClientInterfaceMockRecorder is the mock recorder for MockMongoClientInterface.
type MockMongoClientInterfaceMockRecorder struct {
	mock *MockMongoClientInterface
}

// NewMockMongoClientInterface creates a new mock instance.
func NewMockMongoClientInterface(ctrl *gomock.Controller) *MockMongoClientInterface {
	mock := &MockMongoClientInterface{ctrl: ctrl}
	mock.recorder = &MockMongoClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoClientInterface) EXPECT() *MockMongoClientInterfaceMockRecorder {
	return m.recorder
}

// Database mocks base method.
func (m *MockMongoClientInterface) Database(name string, opts ...*options.DatabaseOptions) db.MongoDatabaseInterface {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Database", varargs...)
	ret0, _ := ret[0].(db.MongoDatabaseInterface)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockMongoClientInterfaceMockRecorder) Database(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockMongoClientInterface)(nil).Database), varargs...)
}

// Disconnect mocks base method.
func (m *MockMongoClientInterface) Disconnect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockMongoClientInterfaceMockRecorder) Disconnect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockMongoClientInterface)(nil).Disconnect), ctx)
}

// Ping mocks base method.
func (m *MockMongoClientInterface) Ping(ctx context.Context, rp *readpref.ReadPref) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, rp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMongoClientInterfaceMockRecorder) Ping(ctx, rp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMongoClientInterface)(nil).Ping), ctx, rp)
}

// UseSessionWithOptions mocks base method.
func (m *MockMongoClientInterface) UseSessionWithOptions(ctx context.Context, opts *options.SessionOptions, fn func(mongo.SessionContext) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseSessionWithOptions", ctx, opts, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseSessionWithOptions indicates an expected call of UseSessionWithOptions.
func (mr *MockMongoClientInterfaceMockRecorder) UseSessionWithOptions(ctx, opts, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseSessionWithOptions", reflect.TypeOf((*MockMongoClientInterface)(nil).UseSessionWithOptions), ctx, opts, fn)
}

// MockMongoDatabaseInterface is a mock of MongoDatabaseInterface interface.
type MockMongoDatabaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDatabaseInterfaceMockRecorder
}

// MockMongoDatabaseInterfaceMockRecorder is the mock recorder for MockMongoDatabaseInterface.
type MockMongoDatabaseInterfaceMockRecorder struct {
	mock *MockMongoDatabaseInterface
}

// NewMockMongoDatabaseInterface creates a new mock instance.
func NewMockMongoDatabaseInterface(ctrl *gomock.Controller) *MockMongoDatabaseInterface {
	mock := &MockMongoDatabaseInterface{ctrl: ctrl}
	mock.recorder = &MockMongoDatabaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDatabaseInterface) EXPECT() *MockMongoDatabaseInterfaceMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockMongoDatabaseInterface) Collection(name string, opts ...*options.CollectionOptions) db.MongoCollectionInterface {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collection", varargs...)
	ret0, _ := ret[0].(db.MongoCollectionInterface)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockMongoDatabaseInterfaceMockRecorder) Collection(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockMongoDatabaseInterface)(nil).Collection), varargs...)
}

// MockMongoCollectionInterface is a mock of MongoCollectionInterface interface.
type MockMongoCollectionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMongoCollectionInterfaceMockRecorder
}

// MockMongoCollectionInterfaceMockRecorder is the mock recorder for MockMongoCollectionInterface.
type MockMongoCollectionInterfaceMockRecorder struct {
	mock *MockMongoCollectionInterface
}

// NewMockMongoCollectionInterface creates a new mock instance.
func NewMockMongoCollectionInterface(ctrl *gomock.Controller) *MockMongoCollectionInterface {
	mock := &MockMongoCollectionInterface{ctrl: ctrl}
	mock.recorder = &MockMongoCollectionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoCollectionInterface) EXPECT() *MockMongoCollectionInterfaceMockRecorder {
	return m.recorder
}

// FindOne mocks base method.
func (m *MockMongoCollectionInterface) FindOne(ctx context.Context, filter interface{}, opts ...*options.FindOneOptions) db.MongoSingleResultInterface {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(db.MongoSingleResultInterface)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockMongoCollectionInterfaceMockRecorder) FindOne(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockMongoCollectionInterface)(nil).FindOne), varargs...)
}

// InsertOne mocks base method.
func (m *MockMongoCollectionInterface) InsertOne(ctx context.Context, document interface{}, opts ...*options.InsertOneOptions) (*mongo.InsertOneResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, document}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertOne", varargs...)
	ret0, _ := ret[0].(*mongo.InsertOneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockMongoCollectionInterfaceMockRecorder) InsertOne(ctx, document interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, document}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockMongoCollectionInterface)(nil).InsertOne), varargs...)
}

// MockMongoSingleResultInterface is a mock of MongoSingleResultInterface interface.
type MockMongoSingleResultInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMongoSingleResultInterfaceMockRecorder
}

// MockMongoSingleResultInterfaceMockRecorder is the mock recorder for MockMongoSingleResultInterface.
type MockMongoSingleResultInterfaceMockRecorder struct {
	mock *MockMongoSingleResultInterface
}

// NewMockMongoSingleResultInterface creates a new mock instance.
func NewMockMongoSingleResultInterface(ctrl *gomock.Controller) *MockMongoSingleResultInterface {
	mock := &MockMongoSingleResultInterface{ctrl: ctrl}
	mock.recorder = &MockMongoSingleResultInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoSingleResultInterface) EXPECT() *MockMongoSingleResultInterfaceMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockMongoSingleResultInterface) Decode(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockMongoSingleResultInterfaceMockRecorder) Decode(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockMongoSingleResultInterface)(nil).Decode), v)
}
